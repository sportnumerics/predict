Resources:
  ContainerRepository:
    Type: "AWS::ECR::Repository"
    Properties:
      RepositoryName: sportnumerics-predictor-${opt:stage}
  Cluster:
    Type: AWS::ECS::Cluster
  PredictTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
      - Name: predict
        Image: 
          Fn::Join: 
            - ""
            - - Ref: AWS::AccountId
              - ".dkr.ecr."
              - Ref: AWS::Region
              - ".amazonaws.com/sportnumerics-predictor-${opt:stage}:latest"
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: EcsLogs
            awslogs-region:
              Ref: AWS::Region
        Environment:
        - Name: TEAMS_TABLE_NAME
          Value: ${file(serverless.yml):custom.teamsTableName}
        - Name: STAGE
          Value: ${opt:stage}
        - Name: AWS_DEFAULT_REGION
          Value:
            Ref: AWS::Region
      Memory: 1GB
      Cpu: 256
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn:
        Ref: TaskRole
      ExecutionRoleArn:
        Ref: TaskExecutionRole
      NetworkMode: awsvpc
  EcsLogs:
    Type: AWS::Logs::LogGroup
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: TaskExecutionRole
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: ReadStats
          PolicyDocument:
            Statement:
              - Effect: "Allow"
                Action: "dynamodb:Query"
                Resource:
                  - ${file(serverless.yml):custom.teamsTableArn}
        - PolicyName: WriteResults
          PolicyDocument:
            Statement:
              - Effect: "Allow"
                Action: "dynamodb:UpdateItem"
                Resource:
                  - ${file(serverless.yml):custom.teamsTableArn}